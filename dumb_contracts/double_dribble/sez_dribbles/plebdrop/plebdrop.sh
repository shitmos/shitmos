#!/bin/bash

set -e  # Exit on any error

# Define the Python interpreter (update this path to your Python 3.11 interpreter)
PYTHON_INTERPRETER=/home/linuxbrew/.linuxbrew/opt/python@3.11/bin/python3.11

# Get the directory of the script
SCRIPT_DIR=$(dirname "$(realpath "$0")")

# Source the config.py values using Python
DENOM=$($PYTHON_INTERPRETER -c "import config; print(config.DENOM)")
KEY_NAME=$($PYTHON_INTERPRETER -c "import config; print(config.KEY_NAME)")
CSV_FILE=$($PYTHON_INTERPRETER -c "import config; print(config.DISTRIBUTION_CSV_FILE)")

# Hardcoded sender address
FROM_ADDRESS="stars1r6f5tfxdx2pw5p94f2v5n96xd4nglz5qdgl4l3"

# Debug: Print config values
echo "DENOM (common name): $DENOM"
echo "KEY_NAME: $KEY_NAME"
echo "CSV_FILE: $CSV_FILE"
echo "FROM_ADDRESS: $FROM_ADDRESS"

# Directories for transactions and balances
TRANSACTIONS_DIR="$SCRIPT_DIR/../data/transactions"
BALANCES_DIR="$SCRIPT_DIR/../data/balances"

# Create directories if they do not exist
mkdir -p "$TRANSACTIONS_DIR"
mkdir -p "$BALANCES_DIR"

# Create a dynamic balance file name
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
INITIAL_BALANCES_FILE="${BALANCES_DIR}/initial_balances_${TIMESTAMP}.json"
FINAL_BALANCES_FILE="${BALANCES_DIR}/final_balances_${TIMESTAMP}.json"

# Run get_wallet_balances.py first and store the initial balances
echo "Fetching initial wallet balances..."
$PYTHON_INTERPRETER get_wallet_balances.py --output "$INITIAL_BALANCES_FILE"

# Transaction generation using CSV file
echo "Generating transaction data from CSV..."
PYTHON_SCRIPT_PATH="$SCRIPT_DIR/generate_transactions_from_csv.py"

# Run the Python script and capture the output
OUTPUT=$($PYTHON_INTERPRETER "$PYTHON_SCRIPT_PATH" --csv "$CSV_FILE" --from-address "$FROM_ADDRESS" --denom "$DENOM")

# Print the entire output to debug
echo "Full output from Python script:"
echo "$OUTPUT"

# Extract JSON files generated by the Python script
TRANSACTION_FILES=$(echo "$OUTPUT" | grep -oP '(?<=Transaction saved: ).*\.json')

# Validate JSON files existence
if [ -z "$TRANSACTION_FILES" ]; then
    echo "No JSON transaction files found."
    exit 1
fi

echo "Generated JSON files:"
echo "$TRANSACTION_FILES"

# Print the distribution summary
echo "Printing distribution summary..."
$PYTHON_INTERPRETER "$SCRIPT_DIR/print_plebdrop.py" --csv-file "$CSV_FILE" --denom "$DENOM" --transaction-count "$(echo "$TRANSACTION_FILES" | wc -l)"

# Ask the user if they want to proceed with signing and broadcasting
echo "Do you want to proceed with signing and broadcasting the transactions? (yes/no)"
read -r PROCEED

if [ "$PROCEED" != "yes" ]; then
    echo "Aborting the process."
    exit 0
fi

# Parameters for the transaction
CHAIN_ID="stargaze-1"

for TX_FILE in $TRANSACTION_FILES; do
    echo "Processing transaction file: $TX_FILE"

    read -p "Are you sure you want to sign the transaction? (y/n) " confirm_sign
    if [[ "$confirm_sign" == "y" || "$confirm_sign" == "Y" ]]; then
        TX_SIGNED_FILE="${TX_FILE%.json}_signed.json"
        echo "Signing the transaction using file: $TX_FILE"

        # Sign the transaction
        /home/flarnrules/go/bin/starsd tx sign "$TX_FILE" \
            --from "$KEY_NAME" \
            --chain-id "$CHAIN_ID" \
            --output-document "$TX_SIGNED_FILE"

        # Check if the signing was successful
        if [ $? -ne 0 ]; then
            echo "Error signing the transaction. Ensure the key '$KEY_NAME' exists."
            exit 1
        fi
    else
        echo "Transaction signing cancelled."
        exit 0
    fi

    read -p "You will broadcast this transaction, are you sure you want to proceed? (y/n) " confirm_broadcast
    if [[ "$confirm_broadcast" == "y" || "$confirm_broadcast" == "Y" ]]; then

        echo "Broadcasting the signed transaction..."
        BROADCAST_OUTPUT=$(/home/flarnrules/go/bin/starsd tx broadcast "$TX_SIGNED_FILE" --node https://rpc.stargaze-apis.com:443 --output json)

        echo "Broadcast output:"
        echo "$BROADCAST_OUTPUT"

        BROADCAST_CODE=$(echo "$BROADCAST_OUTPUT" | jq -r '.code')
        if [ "$BROADCAST_CODE" = "0" ] || [ -z "$BROADCAST_CODE" ]; then
            echo "Transaction broadcasted successfully."
        else
            echo "Transaction failed to broadcast."
        fi

        echo "Waiting for 5 seconds before processing the next transaction..."
        sleep 5
    else
        echo "Transaction broadcasting cancelled."
        exit 0
    fi
done

# Fetch final wallet balances
echo "Fetching final wallet balances..."
$PYTHON_INTERPRETER get_wallet_balances.py --output "$FINAL_BALANCES_FILE"

# Calculate balance differences
echo "Calculating balance differences..."
$PYTHON_INTERPRETER -c "
import json
with open('$INITIAL_BALANCES_FILE', 'r') as f:
    initial_balances = json.load(f)
with open('$FINAL_BALANCES_FILE', 'r') as f:
    final_balances = json.load(f)
print('\nBalance Changes:')
print('----------------')
for denom in final_balances:
    initial = initial_balances.get(denom, 0)
    final = final_balances[denom]
    change = final - initial
    print(f'{denom}: {change:+,.2f}')
"

echo "Process completed."
